/**
 *  Fibaro Double Relay Switcb
 *
 *  Copyright 2017 Robin Winbourne
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 *  The MIT License (MIT)
 *  
 *  Copyright (c) 2014 Jialong Wu
 *  
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *
 */
metadata {
	definition (name: "Fibaro FGS-222 Double Relay Switch", namespace: "smartthings", author: "Robin Winbourne") {
		capability "Polling"
		capability "Relay Switch"
        capability "Configuration"
		capability "Refresh"
        capability "switch"
        
        attribute "switch1", "string"
		attribute "switch2", "string"
        
        command "on1"
		command "off1"
		command "on2"
		command "off2"

		fingerprint inClusters: "0x72 0x86 0x70 0x85 0x8E 0x60 0x25 0x27 0x7A 0x73 0xEF 0x25 0x60", endpointId: "0", deviceId: "0x1001"
	}

	simulator {
		// TODO: define status and reply messages here
	}

	tiles {
		standardTile("switch1", "device.switch1", canChangeIcon: true) {
                        state "on", label: "switch1", action: "off1", icon: "st.switches.switch.on", backgroundColor: "#79b821"
                        state "off", label: "switch1", action: "on1", icon: "st.switches.switch.off", backgroundColor: "#ffffff"
                }
                
        standardTile("switch2", "device.switch2", canChangeIcon: true) {
                        state "on", label: "switch2", action: "off2", icon: "st.switches.switch.on", backgroundColor: "#79b821"
                        state "off", label: "switch2", action: "on2", icon: "st.switches.switch.off", backgroundColor: "#ffffff"
                }
                
        standardTile("refresh", "device.switch1", inactiveLabel: false, decoration: "flat") {
                        state "default", label:"", action:"refresh.refresh", icon:"st.secondary.refresh"
                }

        standardTile("configure", "device.switch2", inactiveLabel: false, decoration: "flat") {
        				state "default", label:"", action:"configure", icon:"st.secondary.configure"
                }


        main(["switch1", "switch2"])
        details(["switch1","switch2","refresh","configure"])
        
    }
    preferences {
        def paragraph = "GROUP 0 - Fibaro Double Relay Switc - Parameter Settings"
       
        input name: "param1", type: "enum", defaultValue: "255", required: true,
            options: ["255" : "255",
            	      "0" : "0",
                      "1" : "1",
                      "2" : "2"],
            title: "Parameter No. 1 - Activate / deactivate functions ALL ON / ALL OFF.  " +
                   "Available settings:\n" +
                   "255 - ALL ON active, ALL OFF active,\n" +
                   "0 - ALL ON is not active ALL OFF is not active,\n" +
                   "1 - ALL ON is not active ALL OFF active,\n" +
                   "2 - ALL ON active ALL OFF is not active.\n" +
                   "Default value: 255."       
    
       
       
        input name: "param3", type: "number", range: "0..1", defaultValue: "0", required: true,
            title: "Parameter No. 3 - Auto off relay after specified time, with the possibility of manual override - immediate Off after button push.  " +
                   "Available settings:\n" +
                   "0 - manual override disabled. After single button push the relay turns on and automatically turns off after specified time.,\n" +
                   "1 - manual override enabled. After single button push the relay turns on and automatically turns off after specified time. Another button push turns the relay off immediately..\n" +
                   "Default value: 0."

		input name: "param4", type: "number", range: "0..65535", defaultValue: "0", required: true,
            title: "Parameter No. 4 - Auto off for relay 1.  " +
                   "Available settings:\n" +
                   "[1 - 65535] (0,1 s – 6553,5 s) Time period for auto off, in miliseconds,\n" +
                   "0 - Auto off disabled.\n" +
                   "Default value: 0."

		input name: "param5", type: "number", range: "0..65535", defaultValue: "0", required: true,
            title: "Parameter No. 5 - Auto off for relay 2.  " +
                   "Available settings:\n" +
                   "[1 - 65535] (0,1 s – 6553,5 s) Time period for auto off, in miliseconds,\n" +
                   "0 - Auto off disabled.\n" +
                   "Default value: 0."

		input name: "param6", type: "number", range: "0..2", defaultValue: "0", required: true,
            title: "Parameter No. 6 - Sending commands to control devices assigned to 1-st association group (key no. 1).  " +
                   "NOTE: Parameter 15 value must be set to 1 to work properly. This activates the double-click functionality - dimmer/roller shutter control.\n" +
                   "Available settings:\n" +
                   "0 - commands are sent when device is turned on and off,\n" +
                   "1 - commands are sent when device is turned off. Enabling device does not send control commands. Double-clicking key sends 'turn on' command, dimmers memorize the last saved state (e.g. 50% brightness),\n" +
                   "2 - commands are sent when device is turned off. Enabling device does not send control commands. Double-clicking key sends 'turn on' command and dimmers are set to 100% brightness.\n" +
                   "Default value: 0."

		input name: "param7", type: "number", range: "0..2", defaultValue: "0", required: true,
            title: "Parameter No. 7 - Sending commands to control devices assigned to 2-st association group (key no. 2).  " +
                   "NOTE: Parameter 15 value must be set to 1 to work properly. This activates the double-click functionality - dimmer/roller shutter control.\n" +
                   "Available settings:\n" +
                   "0 - commands are sent when device is turned on and off,\n" +
                   "1 - commands are sent when device is turned off. Enabling device does not send control commands. Double-clicking key sends 'turn on' command, dimmers memorize the last saved state (e.g. 50% brightness),\n" +
                   "2 - commands are sent when device is turned off. Enabling device does not send control commands. Double-clicking key sends 'turn on' command and dimmers are set to 100% brightness.\n" +
                   "Default value: 0."

		input name: "param13", type: "number", range: "0..1", defaultValue: "0", required: true,
            title: "Parameter No. 13 - Assigns bistable key status to the device.  " +
                   "Available settings:\n" +
                   "0 - [On / Off] device changes status on key status change,\n" +
                   "1 - Device status depends on key status: ON when the key is ON.\n" +
                   "Default value: 0."

		input name: "param14", type: "number", range: "0..1", defaultValue: "1", required: true,
            title: "Parameter No. 14 - Switch type connector, you may choose between momentary and toggle switches.  " +
                   "Available settings:\n" +
                   "0 - momentary switch,\n" +
                   "1 - toggle switch.\n" +
                   "Default value: 1."

		input name: "param15", type: "number", range: "0..1", defaultValue: "0", required: true,
            title: "Parameter No. 15 - Operation of the Dimmer and Roller Shutter Controller - enabling this option allows the user to dim lighting/shut roller by associating Dimmer/Roller Shutter Controller and holding or double press of double switch (only mono-stable switch).  " +
                   "Available settings:\n" +
                   "0 - Dimmer/Roller Shutter Controller control is not active,\n" +
                   "1 - Dimmer/Roller Shutter Controller control is active.\n" +
                   "Default value: 0."

		input name: "param16", type: "number", range: "0..1", defaultValue: "1", required: true,
            title: "Parameter No. 16 - Saving the state of the device after a power failure. Fibaro Switch returns to the last position saved before a power failure.  " +
                   "Available settings:\n" +
                   "0 - Fibaro Switch does not save the state after a power failure, it returns to 'off' position,\n" +
                   "1 - Fibaro Switch saves its state before power failure.\n" +
                   "Default value: 1."

        input name: "param30", type: "number", range: "0..3", defaultValue: "3", required: true,
            title: "Parameter No. 30 - General Alarm, set for relay no. 1.  " +
                  "Available settings:\n" +
                   "0 - DEACTIVATION - the device does not respond to alarm data frames\n" +
                   "1 - ALARM RELAY ON - the device turns on after detecting an alarm,\n" +
                   "2- ALARM RELAY OFF - the device turns off after detecting an alarm,\n" +
                   "3 - ALARM FLASHING - the device periodically changes its status to the opposite, when it detects an alarm within 10 min.\n" +
                   "Default value: 3."

        input name: "param31", type: "number", range: "0..3", defaultValue: "2", required: true,
            title: "Parameter No. 31 - Alarm of flooding with water, set for relay no. 1.  " +
                  "Available settings:\n" +
                   "0 - DEACTIVATION - the device does not respond to alarm data frames\n" +
                   "1 - ALARM RELAY ON - the device turns on after detecting an alarm,\n" +
                   "2- ALARM RELAY OFF - the device turns off after detecting an alarm,\n" +
                   "3 - ALARM FLASHING - the device periodically changes its status to the opposite, when it detects an alarm within 10 min.\n" +
                   "Default value: 2."

        input name: "param32", type: "number", range: "0..3", defaultValue: "3", required: true,
            title: "Parameter No. 32 - Smoke, CO, CO2 Alarm. Set for relay no. 1.  " +
                  "Available settings:\n" +
                   "0 - DEACTIVATION - the device does not respond to alarm data frames\n" +
                   "1 - ALARM RELAY ON - the device turns on after detecting an alarm,\n" +
                   "2- ALARM RELAY OFF - the device turns off after detecting an alarm,\n" +
                   "3 - ALARM FLASHING - the device periodically changes its status to the opposite, when it detects an alarm within 10 min.\n" +
                   "Default value: 3."

        input name: "param33", type: "number", range: "0..3", defaultValue: "1", required: true,
            title: "Parameter No. 33 - Temperature Alarm, set for relay no. 1.  " +
                  "Available settings:\n" +
                   "0 - DEACTIVATION - the device does not respond to alarm data frames\n" +
                   "1 - ALARM RELAY ON - the device turns on after detecting an alarm,\n" +
                   "2- ALARM RELAY OFF - the device turns off after detecting an alarm,\n" +
                   "3 - ALARM FLASHING - the device periodically changes its status to the opposite, when it detects an alarm within 10 min.\n" +
                   "Default value: 1."

        input name: "param40", type: "number", range: "0..3", defaultValue: "3", required: true,
            title: "Parameter No. 40 - General Alarm, set for relay no. 2.  " +
                  "Available settings:\n" +
                   "0 - DEACTIVATION - the device does not respond to alarm data frames\n" +
                   "1 - ALARM RELAY ON - the device turns on after detecting an alarm,\n" +
                   "2- ALARM RELAY OFF - the device turns off after detecting an alarm,\n" +
                   "3 - ALARM FLASHING - the device periodically changes its status to the opposite, when it detects an alarm within 10 min.\n" +
                   "Default value: 3."

        input name: "param41", type: "number", range: "0..3", defaultValue: "2", required: true,
            title: "Parameter No. 41 - Alarm of flooding with water, set for relay no. 2.  " +
                  "Available settings:\n" +
                   "0 - DEACTIVATION - the device does not respond to alarm data frames\n" +
                   "1 - ALARM RELAY ON - the device turns on after detecting an alarm,\n" +
                   "2- ALARM RELAY OFF - the device turns off after detecting an alarm,\n" +
                   "3 - ALARM FLASHING - the device periodically changes its status to the opposite, when it detects an alarm within 10 min.\n" +
                   "Default value: 2."

        input name: "param42", type: "number", range: "0..3", defaultValue: "3", required: true,
            title: "Parameter No. 42 - Smoke, CO, CO2 Alarm. Set for relay no. 2.  " +
                  "Available settings:\n" +
                   "0 - DEACTIVATION - the device does not respond to alarm data frames\n" +
                   "1 - ALARM RELAY ON - the device turns on after detecting an alarm,\n" +
                   "2- ALARM RELAY OFF - the device turns off after detecting an alarm,\n" +
                   "3 - ALARM FLASHING - the device periodically changes its status to the opposite, when it detects an alarm within 10 min.\n" +
                   "Default value: 3."

        input name: "param43", type: "number", range: "0..3", defaultValue: "1", required: true,
            title: "Parameter No. 43 - Temperature Alarm, set for relay no. 2.  " +
                  "Available settings:\n" +
                   "0 - DEACTIVATION - the device does not respond to alarm data frames\n" +
                   "1 - ALARM RELAY ON - the device turns on after detecting an alarm,\n" +
                   "2- ALARM RELAY OFF - the device turns off after detecting an alarm,\n" +
                   "3 - ALARM FLASHING - the device periodically changes its status to the opposite, when it detects an alarm within 10 min.\n" +
                   "Default value: 1."

		input name: "param39", type: "number", range: "0..65535", defaultValue: "600", required: true,
            title: "Parameter No. 39 - Active flashing alarm time. " +
            	   "This parameter allows to set time parameter used in timed modes.\n" +
                   "Available settings:\n" +
                   "[1-65535][ms].\n" +
                   "Default value: 600."
       
     /*   input name: "paramAssociationGroup1", type: "bool", defaultValue: true, required: true,
             title: "The Fibaro Sigle Switch provides the association of three groups.\n\n" +
                    "2nd group is assigned to key no. 1.\n" +
                    "Default value: true"

        input name: "paramAssociationGroup2", type: "bool", defaultValue: true, required: true,
             title: "2nd group is assigned to key no. 2.\n" +
                    "Default value: true"

        input name: "paramAssociationGroup3", type: "bool", defaultValue: false, required: true,
             title: "3rd group reports state of devices. Only one device can be associated to this group.\n" +
                    "Default value: false"*/
    }
}


// 0x25 - Switch binary
// 0x27 - Switch all
// 0x70 - Configuration
// 0x72
// 0x85 - Association
// 0x86 - Version
// 0x8E
// 0x7A
// 0x73
// 0xEF - Mark
// 0x60 - Multi channel


// parse events into attributes
def parse(String description) {
	log.debug "Parsing '${description}'"
    
	def result = null
	def cmd = zwave.parse(description, [0x60:3, 0x25:1, 0x70:1, 0x72:1])
	if (cmd) {
		result = createEvent(zwaveEvent(cmd))
	}
	if (result?.name == 'hail' && hubFirmwareLessThan("000.011.00602")) {
		result = [result, response(zwave.basicV1.basicGet())]
		log.debug "Was hailed: requesting state update"
	} else {
		log.debug "Parse returned ${result?.descriptionText}"
	}
	return result

}

//Reports


def zwaveEvent(physicalgraph.zwave.commands.basicv1.BasicReport cmd) {
        log.debug "BasicReport $cmd.value"
        def map = [name: "switch1", type: "physical"]
        if (cmd.value == 0) {
        	map.value = "off"
        }
        else if (cmd.value == 255) {
        	map.value = "on"
        }
        //refresh()
        return map
        
}


def zwaveEvent(physicalgraph.zwave.commands.switchbinaryv1.SwitchBinaryReport cmd) {
        [name: "switch", value: cmd.value ? "on" : "off", type: "digital"]
}

def zwaveEvent(physicalgraph.zwave.commands.multichannelv3.MultiChannelCmdEncap cmd) {
	 log.debug "MultiChannelCmdEncap $cmd"

    def map = [ name: "switch$cmd.sourceEndPoint" ]
    if (cmd.commandClass == 37){
    	if (cmd.parameter == [0]) {
        	map.value = "off"
        }
        if (cmd.parameter == [255]) {
            map.value = "on"
        }
        map
    }

}

// handle commands

def refresh() {
	delayBetween([
    	log.debug("refreshing s1"),
        zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:1, destinationEndPoint:1, commandClass:37, command:2).format(),
    	log.debug("refreshing s2"),
        zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:2, destinationEndPoint:2, commandClass:37, command:2).format(),
		//zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:1, destinationEndPoint:2, commandClass:37, command:2).format()
  	])  
}

def poll() {
	log.debug "Executing 'poll'"
	delayBetween([
		//zwave.switchBinaryV1.switchBinaryGet().format(),
		zwave.manufacturerSpecificV1.manufacturerSpecificGet().format()
	])
}

def configure() {
	log.debug "Executing 'configure'"
    delayBetween([
          zwave.configurationV1.configurationSet(parameterNumber:1, configurationValue:[param1.value]).format(),
          zwave.configurationV1.configurationSet(parameterNumber:3, configurationValue:[param3.value]).format(),
          zwave.configurationV1.configurationSet(parameterNumber:4, configurationValue:[param4.value]).format(),
          zwave.configurationV1.configurationSet(parameterNumber:5, configurationValue:[param5.value]).format(),
          zwave.configurationV1.configurationSet(parameterNumber:6, configurationValue:[param6.value]).format(),
          zwave.configurationV1.configurationSet(parameterNumber:7, configurationValue:[param7.value]).format(),
          zwave.configurationV1.configurationSet(parameterNumber:13, configurationValue:[param13.value]).format(),
          zwave.configurationV1.configurationSet(parameterNumber:14, configurationValue:[param14.value]).format(),
          zwave.configurationV1.configurationSet(parameterNumber:15, configurationValue:[param15.value]).format(),
          zwave.configurationV1.configurationSet(parameterNumber:16, configurationValue:[param16.value]).format(),
          zwave.configurationV1.configurationSet(parameterNumber:30, configurationValue:[param30.value]).format(),
          zwave.configurationV1.configurationSet(parameterNumber:31, configurationValue:[param31.value]).format(),
          zwave.configurationV1.configurationSet(parameterNumber:32, configurationValue:[param32.value]).format(),
          zwave.configurationV1.configurationSet(parameterNumber:33, configurationValue:[param33.value]).format(),
          zwave.configurationV1.configurationSet(parameterNumber:39, configurationValue:[param39.value]).format(),
          zwave.configurationV1.configurationSet(parameterNumber:40, configurationValue:[param40.value]).format(),
          zwave.configurationV1.configurationSet(parameterNumber:41, configurationValue:[param41.value]).format(),
          zwave.configurationV1.configurationSet(parameterNumber:42, configurationValue:[param42.value]).format(),
          zwave.configurationV1.configurationSet(parameterNumber:43, configurationValue:[param43.value]).format(),
          zwave.associationV2.associationSet(groupingIdentifier:1, nodeId:[zwaveHubNodeId]).format(),
          zwave.associationV2.associationSet(groupingIdentifier:2, nodeId:[zwaveHubNodeId]).format(),
          zwave.associationV2.associationSet(groupingIdentifier:3, nodeId:[zwaveHubNodeId]).format(),
          
    ])
}

// 0x72
def zwaveEvent(physicalgraph.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd) {
	if (state.manufacturer != cmd.manufacturerName) {
		updateDataValue("Fibaro", cmd.manufacturerName)
	}
}

def zwaveEvent(physicalgraph.zwave.Command cmd) {
	// Handles all Z-Wave commands we aren't interested in
	[:]
}

def on1() {
	delayBetween([
		zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:1, destinationEndPoint:1, commandClass:37, command:1, parameter:[255]).format(),
		zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:1, destinationEndPoint:1, commandClass:37, command:2).format(),
		zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:2, destinationEndPoint:2, commandClass:37, command:2).format(),
	])
}

def off1() {
	delayBetween([
		zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:1, destinationEndPoint:1, commandClass:37, command:1, parameter:[0]).format(),
		zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:1, destinationEndPoint:1, commandClass:37, command:2).format(),
		zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:2, destinationEndPoint:2, commandClass:37, command:2).format(),

    ])
}

def on2() {
	delayBetween([
		zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:2, destinationEndPoint:2, commandClass:37, command:1, parameter:[255]).format(),
		zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:2, destinationEndPoint:2, commandClass:37, command:2).format(),
		zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:1, destinationEndPoint:1, commandClass:37, command:2).format()
    ])
}

def off2() {
	delayBetween([
		zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:2, destinationEndPoint:2, commandClass:37, command:1, parameter:[0]).format(),
		zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:2, destinationEndPoint:2, commandClass:37, command:2).format(),
		zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:1, destinationEndPoint:1, commandClass:37, command:2).format()
	])
}
